{"version":3,"sources":["../../src/api/passkey.ts"],"sourcesContent":["/* eslint-disable class-methods-use-this */\n// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\nimport { PublicKeyCredentialCreationOptionsJSON, RegistrationResponseJSON } from \"@simplewebauthn/server/esm/deps\";\nimport { AptosConfig } from \"./aptosConfig\";\nimport { HexInput, PendingTransactionResponse } from \"../types\";\nimport { AnyRawTransaction } from \"../transactions\";\nimport {\n  generateRegistrationOptions,\n  getPasskeyAccountAddress,\n  parsePublicKey,\n  registerCredential,\n  signAndSubmitWithPasskey,\n} from \"../internal/passkey\";\nimport { AccountAddress, PublicKey } from \"../core\";\n\n/**\n * A class for all `Passkeys` related operations on Aptos on the browser.\n */\nexport class PasskeysBrowser {\n  readonly config: AptosConfig;\n\n  constructor(config: AptosConfig) {\n    this.config = config;\n  }\n\n  /**\n   * Given a credentialId and a transaction, it prompts the client to sign the transaction\n   *\n   * @param args.credentialId The credential ID of the passkey\n   * @param args.publicKey The public key associated with the passkey\n   * @param args.transaction The transaction to sign\n   * @returns The pending transaction response\n   */\n  async signAndSubmitWithPasskey(args: {\n    credentialId: string | Uint8Array;\n    publicKey: PublicKey;\n    transaction: AnyRawTransaction;\n    timeout?: number;\n    rpID?: string;\n    options?: {\n      allowCredentials?: PublicKeyCredentialDescriptor[]\n    }\n  }): Promise<PendingTransactionResponse> {\n    return signAndSubmitWithPasskey({ aptosConfig: this.config, ...args });\n  }\n\n  async getPasskeyAccountAddress(args: { publicKey: HexInput }): Promise<AccountAddress> {\n    return getPasskeyAccountAddress(args);\n  }\n\n  async generateRegistrationOptions(args: {\n    rpName: string;\n    rpID: string;\n    userID: string;\n    userName: string;\n    challenge?: string | Uint8Array;\n    userDisplayName?: string;\n    timeout?: number;\n    attestationType?: AttestationConveyancePreference;\n    authenticatorAttachment?: AuthenticatorAttachment;\n  }): Promise<PublicKeyCredentialCreationOptionsJSON> {\n    return generateRegistrationOptions(args);\n  }\n\n  async registerCredential(\n    creationOptionsJSON: PublicKeyCredentialCreationOptionsJSON,\n  ): Promise<RegistrationResponseJSON> {\n    return registerCredential(creationOptionsJSON);\n  }\n\n  parsePublicKey(response: RegistrationResponseJSON): PublicKey {\n    return parsePublicKey(response);\n  }\n}\n"],"mappings":"qEAoBO,IAAMA,EAAN,KAAsB,CAG3B,YAAYC,EAAqB,CAC/B,KAAK,OAASA,CAChB,CAUA,MAAM,yBAAyBC,EASS,CACtC,OAAOC,EAAyB,CAAE,YAAa,KAAK,OAAQ,GAAGD,CAAK,CAAC,CACvE,CAEA,MAAM,yBAAyBA,EAAwD,CACrF,OAAOE,EAAyBF,CAAI,CACtC,CAEA,MAAM,4BAA4BA,EAUkB,CAClD,OAAOG,EAA4BH,CAAI,CACzC,CAEA,MAAM,mBACJI,EACmC,CACnC,OAAOC,EAAmBD,CAAmB,CAC/C,CAEA,eAAeE,EAA+C,CAC5D,OAAOC,EAAeD,CAAQ,CAChC,CACF","names":["PasskeysBrowser","config","args","signAndSubmitWithPasskey","getPasskeyAccountAddress","generateRegistrationOptions","creationOptionsJSON","registerCredential","response","parsePublicKey"]}