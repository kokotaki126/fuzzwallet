{"version":3,"sources":["../../src/internal/digitalAsset.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/digitalAsset}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * digitalAsset namespace and without having a dependency cycle error.\n */\n\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { MoveString, Bool, U64 } from \"../bcs\";\nimport { Account, AccountAddress, AccountAddressInput } from \"../core\";\nimport { InputGenerateTransactionOptions, SimpleTransaction } from \"../transactions/types\";\nimport {\n  AnyNumber,\n  GetCollectionDataResponse,\n  GetCurrentTokenOwnershipResponse,\n  GetOwnedTokensResponse,\n  GetTokenActivityResponse,\n  GetTokenDataResponse,\n  MoveStructId,\n  OrderByArg,\n  PaginationArgs,\n  TokenStandardArg,\n} from \"../types\";\nimport {\n  GetCollectionDataQuery,\n  GetCurrentTokenOwnershipQuery,\n  GetTokenActivityQuery,\n  GetTokenDataQuery,\n} from \"../types/generated/operations\";\nimport {\n  GetCollectionData,\n  GetCurrentTokenOwnership,\n  GetTokenActivity,\n  GetTokenData,\n} from \"../types/generated/queries\";\nimport { queryIndexer } from \"./general\";\nimport { generateTransaction } from \"./transactionSubmission\";\nimport { MAX_U64_BIG_INT } from \"../bcs/consts\";\nimport { CurrentTokenOwnershipsV2BoolExp, TokenActivitiesV2BoolExp } from \"../types/generated/types\";\nimport { checkOrConvertArgument, parseTypeTag } from \"../transactions\";\n\n// A property type map for the user input and what Move expects\nconst PropertyTypeMap = {\n  BOOLEAN: \"bool\",\n  U8: \"u8\",\n  U16: \"u16\",\n  U32: \"u32\",\n  U64: \"u64\",\n  U128: \"u128\",\n  U256: \"u256\",\n  ADDRESS: \"address\",\n  STRING: \"0x1::string::String\",\n  ARRAY: \"vector<u8>\",\n};\n\nexport type PropertyType = keyof typeof PropertyTypeMap;\n\n// Accepted property value types for user input\n// To pass in an Array, use Uint8Array type\n// for example `new MoveVector([new MoveString(\"hello\"), new MoveString(\"world\")]).bcsToBytes()`\nexport type PropertyValue = boolean | number | bigint | string | AccountAddress | Uint8Array;\n\n// The default digital asset type to use if non provided\nconst defaultDigitalAssetType = \"0x4::token::Token\";\n\n// FETCH QUERIES\n\nexport async function getDigitalAssetData(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetTokenDataResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: { token_data_id: { _eq: string } } = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetData\",\n  });\n\n  return data.current_token_datas_v2[0];\n}\n\nexport async function getCurrentDigitalAssetOwnership(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n}): Promise<GetCurrentTokenOwnershipResponse> {\n  const { aptosConfig, digitalAssetAddress } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCurrentDigitalAssetOwnership\",\n  });\n\n  return data.current_token_ownerships_v2[0];\n}\n\nexport async function getOwnedDigitalAssets(args: {\n  aptosConfig: AptosConfig;\n  ownerAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetOwnedTokensResponse> {\n  const { aptosConfig, ownerAddress, options } = args;\n\n  const whereCondition: CurrentTokenOwnershipsV2BoolExp = {\n    owner_address: { _eq: AccountAddress.from(ownerAddress).toStringLong() },\n    amount: { _gt: 0 },\n  };\n\n  const graphqlQuery = {\n    query: GetCurrentTokenOwnership,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetCurrentTokenOwnershipQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getOwnedDigitalAssets\",\n  });\n\n  return data.current_token_ownerships_v2;\n}\n\nexport async function getDigitalAssetActivity(args: {\n  aptosConfig: AptosConfig;\n  digitalAssetAddress: AccountAddressInput;\n  options?: PaginationArgs & OrderByArg<GetTokenActivityResponse[0]>;\n}): Promise<GetTokenActivityResponse> {\n  const { aptosConfig, digitalAssetAddress, options } = args;\n\n  const whereCondition: TokenActivitiesV2BoolExp = {\n    token_data_id: { _eq: AccountAddress.from(digitalAssetAddress).toStringLong() },\n  };\n\n  const graphqlQuery = {\n    query: GetTokenActivity,\n    variables: {\n      where_condition: whereCondition,\n      offset: options?.offset,\n      limit: options?.limit,\n      order_by: options?.orderBy,\n    },\n  };\n\n  const data = await queryIndexer<GetTokenActivityQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getDigitalAssetActivity\",\n  });\n\n  return data.token_activities_v2;\n}\n\nexport interface CreateCollectionOptions {\n  maxSupply?: AnyNumber;\n  mutableDescription?: boolean;\n  mutableRoyalty?: boolean;\n  mutableURI?: boolean;\n  mutableTokenDescription?: boolean;\n  mutableTokenName?: boolean;\n  mutableTokenProperties?: boolean;\n  mutableTokenURI?: boolean;\n  tokensBurnableByCreator?: boolean;\n  tokensFreezableByCreator?: boolean;\n  royaltyNumerator?: number;\n  royaltyDenominator?: number;\n}\n\nexport async function createCollectionTransaction(\n  args: {\n    aptosConfig: AptosConfig;\n    creator: Account;\n    description: string;\n    name: string;\n    uri: string;\n    options?: InputGenerateTransactionOptions;\n  } & CreateCollectionOptions,\n): Promise<SimpleTransaction> {\n  const { aptosConfig, options, creator } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::create_collection\",\n      functionArguments: [\n        // Do not change the order\n        new MoveString(args.description),\n        new U64(args.maxSupply ?? MAX_U64_BIG_INT),\n        new MoveString(args.name),\n        new MoveString(args.uri),\n        new Bool(args.mutableDescription ?? true),\n        new Bool(args.mutableRoyalty ?? true),\n        new Bool(args.mutableURI ?? true),\n        new Bool(args.mutableTokenDescription ?? true),\n        new Bool(args.mutableTokenName ?? true),\n        new Bool(args.mutableTokenProperties ?? true),\n        new Bool(args.mutableTokenURI ?? true),\n        new Bool(args.tokensBurnableByCreator ?? true),\n        new Bool(args.tokensFreezableByCreator ?? true),\n        new U64(args.royaltyNumerator ?? 0),\n        new U64(args.royaltyDenominator ?? 1),\n      ],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function getCollectionData(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<GetCollectionDataResponse> {\n  const { aptosConfig, creatorAddress, collectionName, options } = args;\n  const address = AccountAddress.from(creatorAddress);\n\n  const whereCondition: any = {\n    collection_name: { _eq: collectionName },\n    creator_address: { _eq: address.toStringLong() },\n  };\n\n  if (options?.tokenStandard) {\n    whereCondition.token_standard = { _eq: options?.tokenStandard ?? \"v2\" };\n  }\n\n  const graphqlQuery = {\n    query: GetCollectionData,\n    variables: {\n      where_condition: whereCondition,\n    },\n  };\n  const data = await queryIndexer<GetCollectionDataQuery>({\n    aptosConfig,\n    query: graphqlQuery,\n    originMethod: \"getCollectionData\",\n  });\n\n  return data.current_collections_v2[0];\n}\n\nexport async function getCollectionId(args: {\n  aptosConfig: AptosConfig;\n  creatorAddress: AccountAddressInput;\n  collectionName: string;\n  options?: TokenStandardArg;\n}): Promise<string> {\n  return (await getCollectionData(args)).collection_id;\n}\n\n// TRANSACTIONS\n\nexport async function mintDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    options,\n    creator,\n    collection,\n    description,\n    name,\n    uri,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n  } = args;\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint\",\n      functionArguments: [\n        collection,\n        description,\n        name,\n        uri,\n        propertyKeys ?? [],\n        convertedPropertyType ?? [],\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n      ],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function transferDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  sender: Account;\n  digitalAssetAddress: AccountAddressInput;\n  recipient: AccountAddress;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, sender, digitalAssetAddress, recipient, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: sender.accountAddress,\n    data: {\n      function: \"0x1::object::transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress, recipient],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function mintSoulBoundTransaction(args: {\n  aptosConfig: AptosConfig;\n  account: Account;\n  collection: string;\n  description: string;\n  name: string;\n  uri: string;\n  recipient: AccountAddress;\n  propertyKeys?: Array<string>;\n  propertyTypes?: Array<PropertyType>;\n  propertyValues?: Array<PropertyValue>;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    account,\n    collection,\n    description,\n    name,\n    uri,\n    recipient,\n    propertyKeys,\n    propertyTypes,\n    propertyValues,\n    options,\n  } = args;\n  if (propertyKeys?.length !== propertyValues?.length) {\n    throw new Error(\"Property keys and property values counts do not match\");\n  }\n  if (propertyTypes?.length !== propertyValues?.length) {\n    throw new Error(\"Property types and property values counts do not match\");\n  }\n  const convertedPropertyType = propertyTypes?.map((type) => PropertyTypeMap[type]);\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: account.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::mint_soul_bound\",\n      functionArguments: [\n        collection,\n        description,\n        name,\n        uri,\n        propertyKeys ?? [],\n        convertedPropertyType ?? [],\n        getPropertyValueRaw(propertyValues ?? [], convertedPropertyType ?? []),\n        recipient,\n      ],\n    },\n    options,\n  });\n\n  return transaction;\n}\n\nexport async function burnDigitalAssetTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::burn\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function freezeDigitalAssetTransaferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::freeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function unfreezeDigitalAssetTransaferTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::unfreeze_transfer\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function setDigitalAssetDescriptionTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  description: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, description, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_description\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress, description],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function setDigitalAssetNameTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  name: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, name, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_name\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress, name],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function setDigitalAssetURITransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  uri: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, uri, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::set_uri\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress, uri],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function addDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        digitalAssetAddress,\n        propertyKey,\n        PropertyTypeMap[propertyType],\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function removeDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const { aptosConfig, creator, propertyKey, digitalAssetAddress, digitalAssetType, options } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::remove_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [digitalAssetAddress, propertyKey],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function updateDigitalAssetPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType],\n      functionArguments: [\n        digitalAssetAddress,\n        propertyKey,\n        PropertyTypeMap[propertyType],\n        getSinglePropertyValueRaw(propertyValue, PropertyTypeMap[propertyType]),\n      ],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function addDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::add_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [digitalAssetAddress, propertyKey, propertyValue],\n    },\n    options,\n  });\n  return transaction;\n}\n\nexport async function updateDigitalAssetTypedPropertyTransaction(args: {\n  aptosConfig: AptosConfig;\n  creator: Account;\n  propertyKey: string;\n  propertyType: PropertyType;\n  propertyValue: PropertyValue;\n  digitalAssetAddress: AccountAddressInput;\n  digitalAssetType?: MoveStructId;\n  options?: InputGenerateTransactionOptions;\n}): Promise<SimpleTransaction> {\n  const {\n    aptosConfig,\n    creator,\n    propertyKey,\n    propertyType,\n    propertyValue,\n    digitalAssetAddress,\n    digitalAssetType,\n    options,\n  } = args;\n  const transaction = await generateTransaction({\n    aptosConfig,\n    sender: creator.accountAddress,\n    data: {\n      function: \"0x4::aptos_token::update_typed_property\",\n      typeArguments: [digitalAssetType ?? defaultDigitalAssetType, PropertyTypeMap[propertyType]],\n      functionArguments: [digitalAssetAddress, propertyKey, propertyValue],\n    },\n    options,\n  });\n  return transaction;\n}\n\nfunction getPropertyValueRaw(propertyValues: Array<PropertyValue>, propertyTypes: Array<string>): Array<Uint8Array> {\n  const results = new Array<Uint8Array>();\n  propertyTypes.forEach((typ, index) => {\n    results.push(getSinglePropertyValueRaw(propertyValues[index], typ));\n  });\n\n  return results;\n}\n\nfunction getSinglePropertyValueRaw(propertyValue: PropertyValue, propertyType: string): Uint8Array {\n  const typeTag = parseTypeTag(propertyType);\n  const res = checkOrConvertArgument(propertyValue, typeTag, 0, []);\n  return res.bcsToBytes();\n}\n"],"mappings":"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","names":["PropertyTypeMap","defaultDigitalAssetType","getDigitalAssetData","args","aptosConfig","digitalAssetAddress","whereCondition","AccountAddress","queryIndexer","GetTokenData","getCurrentDigitalAssetOwnership","GetCurrentTokenOwnership","getOwnedDigitalAssets","ownerAddress","options","graphqlQuery","getDigitalAssetActivity","GetTokenActivity","createCollectionTransaction","creator","generateTransaction","MoveString","U64","MAX_U64_BIG_INT","Bool","getCollectionData","creatorAddress","collectionName","address","GetCollectionData","getCollectionId","mintDigitalAssetTransaction","collection","description","name","uri","propertyKeys","propertyTypes","propertyValues","convertedPropertyType","type","getPropertyValueRaw","transferDigitalAssetTransaction","sender","recipient","digitalAssetType","mintSoulBoundTransaction","account","burnDigitalAssetTransaction","freezeDigitalAssetTransaferTransaction","unfreezeDigitalAssetTransaferTransaction","setDigitalAssetDescriptionTransaction","setDigitalAssetNameTransaction","setDigitalAssetURITransaction","addDigitalAssetPropertyTransaction","propertyKey","propertyType","propertyValue","getSinglePropertyValueRaw","removeDigitalAssetPropertyTransaction","updateDigitalAssetPropertyTransaction","addDigitalAssetTypedPropertyTransaction","updateDigitalAssetTypedPropertyTransaction","results","typ","index","typeTag","parseTypeTag","checkOrConvertArgument"]}