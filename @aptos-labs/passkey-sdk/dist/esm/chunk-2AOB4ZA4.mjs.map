{"version":3,"sources":["../../src/internal/passkey.ts"],"sourcesContent":["// Copyright Â© Aptos Foundation\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * This file contains the underlying implementations for exposed API surface in\n * the {@link api/passkeysBrowser}. By moving the methods out into a separate file,\n * other namespaces and processes can access these methods without depending on the entire\n * faucet namespace and without having a dependency cycle error.\n */\nimport {\n  generateRegistrationOptions as _generateRegistrationOptions,\n  verifyRegistrationResponse as _verifyRegistrationResponse,\n  generateAuthenticationOptions as _generateAuthenticationOptions,\n  verifyAuthenticationResponse as _verifyAuthenticationResponse,\n  VerifiedRegistrationResponse,\n  VerifiedAuthenticationResponse,\n} from \"@simplewebauthn/server\";\nimport { startRegistration, startAuthentication } from \"@simplewebauthn/browser\";\nimport { isoBase64URL, cose, parseAuthenticatorData, convertCOSEtoPKCS } from \"@simplewebauthn/server/helpers\";\nimport {\n  AuthenticationResponseJSON,\n  AuthenticatorDevice,\n  PublicKeyCredentialCreationOptionsJSON,\n  PublicKeyCredentialRequestOptionsJSON,\n  RegistrationResponseJSON,\n} from \"@simplewebauthn/server/esm/deps\";\nimport { AptosConfig } from \"../api/aptosConfig\";\nimport { AccountAddress, AuthenticationKey, PublicKey } from \"../core\";\nimport { AnyRawTransaction, signWithPasskey } from \"../transactions\";\nimport { HexInput, PendingTransactionResponse } from \"../types\";\nimport { submitTransaction } from \"./transactionSubmission\";\nimport { Secp256r1PublicKey } from \"../core/crypto/secp256r1\";\n\nconst supportedAlgorithmIDs = [cose.COSEALG.ES256];\n\nexport { AnyRawTransaction, signWithPasskey } from \"../transactions\";\n\nexport async function generateRegistrationOptions(args: {\n  rpName: string;\n  rpID: string;\n  userID: string;\n  userName: string;\n  challenge?: string | Uint8Array;\n  userDisplayName?: string;\n  timeout?: number;\n  attestationType?: AttestationConveyancePreference;\n  authenticatorAttachment?: AuthenticatorAttachment;\n}): Promise<PublicKeyCredentialCreationOptionsJSON> {\n  const { authenticatorAttachment } = args;\n  const authenticatorSelection: AuthenticatorSelectionCriteria = {\n    authenticatorAttachment,\n    residentKey: \"required\",\n    userVerification: \"required\",\n  };\n\n  return _generateRegistrationOptions({\n    ...args,\n    authenticatorSelection,\n    supportedAlgorithmIDs,\n  });\n}\n\nexport async function registerCredential(\n  creationOptionsJSON: PublicKeyCredentialCreationOptionsJSON,\n): Promise<RegistrationResponseJSON> {\n  return startRegistration(creationOptionsJSON);\n}\n\nexport async function verifyRegistrationResponse(args: {\n  response: RegistrationResponseJSON;\n  expectedChallenge: string | ((challenge: string) => boolean | Promise<boolean>);\n  expectedOrigin: string | string[];\n  expectedRPID?: string | string[];\n}): Promise<VerifiedRegistrationResponse> {\n  return _verifyRegistrationResponse({\n    ...args,\n    requireUserVerification: true,\n    supportedAlgorithmIDs,\n  });\n}\n\nexport async function generateAuthenticationOptions(args: {\n  credentialId: string | Uint8Array;\n  timeout?: number;\n  rpID?: string;\n}): Promise<PublicKeyCredentialRequestOptionsJSON> {\n  const { credentialId } = args;\n  const allowCredentials: PublicKeyCredentialDescriptor[] = [\n    {\n      type: \"public-key\",\n      id: typeof credentialId === \"string\" ? isoBase64URL.toBuffer(credentialId) : credentialId,\n    },\n  ];\n  return _generateAuthenticationOptions({ ...args, allowCredentials, userVerification: \"required\" });\n}\n\nexport async function authenticateCredential(\n  requestOptionsJSON: PublicKeyCredentialRequestOptionsJSON,\n): Promise<AuthenticationResponseJSON> {\n  return startAuthentication(requestOptionsJSON);\n}\n\nexport async function verifyAuthenticationResponse(args: {\n  response: AuthenticationResponseJSON;\n  expectedChallenge: string | ((challenge: string) => boolean | Promise<boolean>);\n  expectedOrigin: string | string[];\n  expectedRPID: string | string[];\n  expectedType?: string | string[];\n  authenticator: AuthenticatorDevice;\n  requireUserVerification?: boolean;\n  advancedFIDOConfig?: {\n    userVerification?: UserVerificationRequirement;\n  };\n}): Promise<VerifiedAuthenticationResponse> {\n  return _verifyAuthenticationResponse({ ...args });\n}\n\nexport function parsePublicKey(response: RegistrationResponseJSON): PublicKey {\n  const authData = isoBase64URL.toBuffer(response.response.authenticatorData!);\n  const parsedAuthenticatorData = parseAuthenticatorData(authData);\n  // Convert from COSE\n  const publicKey = convertCOSEtoPKCS(parsedAuthenticatorData.credentialPublicKey!);\n  return new Secp256r1PublicKey(publicKey);\n}\n\nexport async function signAndSubmitWithPasskey(args: {\n  aptosConfig: AptosConfig;\n  credentialId: string | Uint8Array;\n  publicKey: PublicKey;\n  transaction: AnyRawTransaction;\n  timeout?: number;\n  rpID?: string;\n  options?: {\n    allowCredentials?: PublicKeyCredentialDescriptor[];\n  };\n}): Promise<PendingTransactionResponse> {\n  const { aptosConfig, transaction } = args;\n\n  const authenticator = await signWithPasskey({ ...args });\n  console.log(authenticator);\n  return submitTransaction({\n    aptosConfig,\n    transaction,\n    senderAuthenticator: authenticator,\n  });\n}\n\nexport async function getPasskeyAccountAddress(args: { publicKey: HexInput; alg?: number }): Promise<AccountAddress> {\n  const { publicKey, alg } = args;\n  const algorithm = alg ?? cose.COSEALG.ES256;\n\n  let publicKeyObj: PublicKey;\n  switch (algorithm) {\n    // ES256, P256, Secp256r1 are all the same thing.\n    case cose.COSEALG.ES256:\n      publicKeyObj = new Secp256r1PublicKey(publicKey);\n      break;\n    default:\n      throw new Error(\"Algorithm is not supported\");\n  }\n  const authKey = AuthenticationKey.fromPublicKey({ publicKey: publicKeyObj });\n  return AccountAddress.from(authKey.toString());\n}\n"],"mappings":"2KASA,OACE,+BAA+BA,EAC/B,8BAA8BC,EAC9B,iCAAiCC,EACjC,gCAAgCC,MAG3B,yBACP,OAAS,qBAAAC,EAAmB,uBAAAC,MAA2B,0BACvD,OAAS,gBAAAC,EAAc,QAAAC,EAAM,0BAAAC,EAAwB,qBAAAC,MAAyB,iCAe9E,IAAMC,EAAwB,CAACC,EAAK,QAAQ,KAAK,EAIjD,eAAsBC,EAA4BC,EAUE,CAClD,GAAM,CAAE,wBAAAC,CAAwB,EAAID,EAOpC,OAAOE,EAA6B,CAClC,GAAGF,EACH,uBAR6D,CAC7D,wBAAAC,EACA,YAAa,WACb,iBAAkB,UACpB,EAKE,sBAAAJ,CACF,CAAC,CACH,CAEA,eAAsBM,EACpBC,EACmC,CACnC,OAAOC,EAAkBD,CAAmB,CAC9C,CAEA,eAAsBE,EAA2BN,EAKP,CACxC,OAAOO,EAA4B,CACjC,GAAGP,EACH,wBAAyB,GACzB,sBAAAH,CACF,CAAC,CACH,CAEA,eAAsBW,EAA8BR,EAID,CACjD,GAAM,CAAE,aAAAS,CAAa,EAAIT,EACnBU,EAAoD,CACxD,CACE,KAAM,aACN,GAAI,OAAOD,GAAiB,SAAWE,EAAa,SAASF,CAAY,EAAIA,CAC/E,CACF,EACA,OAAOG,EAA+B,CAAE,GAAGZ,EAAM,iBAAAU,EAAkB,iBAAkB,UAAW,CAAC,CACnG,CAEA,eAAsBG,EACpBC,EACqC,CACrC,OAAOC,EAAoBD,CAAkB,CAC/C,CAEA,eAAsBE,EAA6BhB,EAWP,CAC1C,OAAOiB,EAA8B,CAAE,GAAGjB,CAAK,CAAC,CAClD,CAEO,SAASkB,EAAeC,EAA+C,CAC5E,IAAMC,EAAWT,EAAa,SAASQ,EAAS,SAAS,iBAAkB,EACrEE,EAA0BC,EAAuBF,CAAQ,EAEzDG,EAAYC,EAAkBH,EAAwB,mBAAoB,EAChF,OAAO,IAAII,EAAmBF,CAAS,CACzC,CAEA,eAAsBG,EAAyB1B,EAUP,CACtC,GAAM,CAAE,YAAA2B,EAAa,YAAAC,CAAY,EAAI5B,EAE/B6B,EAAgB,MAAMC,EAAgB,CAAE,GAAG9B,CAAK,CAAC,EACvD,eAAQ,IAAI6B,CAAa,EAClBE,EAAkB,CACvB,YAAAJ,EACA,YAAAC,EACA,oBAAqBC,CACvB,CAAC,CACH,CAEA,eAAsBG,EAAyBhC,EAAsE,CACnH,GAAM,CAAE,UAAAuB,EAAW,IAAAU,CAAI,EAAIjC,EACrBkC,EAAYD,GAAOnC,EAAK,QAAQ,MAElCqC,EACJ,OAAQD,EAAW,CAEjB,KAAKpC,EAAK,QAAQ,MAChBqC,EAAe,IAAIV,EAAmBF,CAAS,EAC/C,MACF,QACE,MAAM,IAAI,MAAM,4BAA4B,CAChD,CACA,IAAMa,EAAUC,EAAkB,cAAc,CAAE,UAAWF,CAAa,CAAC,EAC3E,OAAOG,EAAe,KAAKF,EAAQ,SAAS,CAAC,CAC/C","names":["_generateRegistrationOptions","_verifyRegistrationResponse","_generateAuthenticationOptions","_verifyAuthenticationResponse","startRegistration","startAuthentication","isoBase64URL","cose","parseAuthenticatorData","convertCOSEtoPKCS","supportedAlgorithmIDs","cose","generateRegistrationOptions","args","authenticatorAttachment","_generateRegistrationOptions","registerCredential","creationOptionsJSON","startRegistration","verifyRegistrationResponse","_verifyRegistrationResponse","generateAuthenticationOptions","credentialId","allowCredentials","isoBase64URL","_generateAuthenticationOptions","authenticateCredential","requestOptionsJSON","startAuthentication","verifyAuthenticationResponse","_verifyAuthenticationResponse","parsePublicKey","response","authData","parsedAuthenticatorData","parseAuthenticatorData","publicKey","convertCOSEtoPKCS","Secp256r1PublicKey","signAndSubmitWithPasskey","aptosConfig","transaction","authenticator","signWithPasskey","submitTransaction","getPasskeyAccountAddress","alg","algorithm","publicKeyObj","authKey","AuthenticationKey","AccountAddress"]}