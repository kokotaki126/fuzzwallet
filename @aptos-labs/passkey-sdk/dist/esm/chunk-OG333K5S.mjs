import{a as h,b as m,c as d}from"./chunk-V6JFR2CB.mjs";import{b as i}from"./chunk-NL72WE3E.mjs";import{sha3_256 as x}from"@noble/hashes/sha3";import{p256 as u}from"@noble/curves/p256";import{bufferToBase64URLString as H}from"@simplewebauthn/browser";import{sha256 as S}from"@noble/hashes/sha256";var n=class n extends h{constructor(e){super();let t=i.fromHexInput(e);if(t.toUint8Array().length!==n.LENGTH)throw new Error(`PublicKey length should be ${n.LENGTH}`);this.key=t}toUint8Array(){return this.key.toUint8Array()}toString(){return this.key.toString()}verifySignature(e){let{message:t,signature:r}=e,o=i.fromHexInput(t).toUint8Array(),l=S(o),g=r.toUint8Array();return u.verify(g,l,this.toUint8Array())}verifyWebAuthnSignature(e){let{message:t,signature:r}=e;if(!(r.paar.signature.signature instanceof y))throw new Error("Attestation signature is not a Secp256r1Signature");let{challenge:o}=r.getCollectedClientData(),l=H(i.fromHexInput(t).toUint8Array());if(o!==l)return!1;let g=r.getVerificationData();return this.verifySignature({message:g,signature:r.paar.signature.signature})}serialize(e){e.serializeBytes(this.key.toUint8Array())}static deserialize(e){let t=e.deserializeBytes();return new n(t)}static load(e){let t=e.deserializeBytes();return new n(t)}};n.LENGTH=65;var c=n,a=class a extends m{constructor(e){super();let t=i.fromHexInput(e);if(t.toUint8Array().length!==a.LENGTH)throw new Error(`PrivateKey length should be ${a.LENGTH}`);this.key=t}toUint8Array(){return this.key.toUint8Array()}toString(){return this.key.toString()}sign(e){let t=i.fromHexInput(e),r=x(t.toUint8Array()),o=u.sign(r,this.key.toUint8Array());return new y(o.toCompactRawBytes())}serialize(e){e.serializeBytes(this.toUint8Array())}static deserialize(e){let t=e.deserializeBytes();return new a(t)}static generate(){let e=u.utils.randomPrivateKey();return new a(e)}publicKey(){let e=u.getPublicKey(this.key.toUint8Array(),!1);return new c(e)}};a.LENGTH=32;var f=a,s=class s extends d{constructor(e){super();let t=i.fromHexInput(e);if(t.toUint8Array().length!==s.LENGTH)throw new Error(`Signature length should be ${s.LENGTH}, recieved ${t.toUint8Array().length}`);let r=u.Signature.fromCompact(e).normalizeS().toCompactRawBytes();this.data=i.fromHexInput(r)}toUint8Array(){return this.data.toUint8Array()}toString(){return this.data.toString()}serialize(e){e.serializeBytes(this.data.toUint8Array())}static deserialize(e){let t=e.deserializeBytes();return new s(t)}static load(e){let t=e.deserializeBytes();return new s(t)}};s.LENGTH=64;var y=s;export{c as a,f as b,y as c};
//# sourceMappingURL=chunk-OG333K5S.mjs.map